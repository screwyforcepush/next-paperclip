# Universal Paperclips Simulation Game - Technical Specification

## 1. Project Overview

Universal Paperclips is a business simulation game where players act as consultants to a hypothetical paperclip company. The game involves providing advice to the CEO, simulating business cycles, and observing the impact of decisions on various Key Performance Indicators (KPIs).

## 2. Tech Stack

- Frontend: Next.js 13+, React, TypeScript
- Styling: Tailwind CSS
- Data Visualization: Tremor
- Backend: Next.js API Routes with Edge Runtime
- AI/ML: LangChain, LangGraph
- State Management: React Context API
- Persistence: Local Storage

## 3. Project Structure

```
project-root/
├── .next/
├── src/
│   ├── app/
│   │   ├── api/
│   │   │   ├── simulate/
│   │   │   │   └── route.ts
│   │   │   └── generateScenario/
│   │   │       └── route.ts
│   │   ├── fonts/
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── components/
│   │   ├── ui/
│   │   │   ├── GameHeader.tsx
│   │   │   └── NewGameButton.tsx
│   │   ├── game/
│   │   │   ├── ChatPanel.tsx
│   │   │   ├── MessageBubble.tsx
│   │   │   ├── BusinessCycleHeader.tsx
│   │   │   └── SimulationAccordion.tsx
│   │   └── dashboard/
│   │       ├── Dashboard.tsx
│   │       ├── CompanyOverview.tsx
│   │       └── KPIChart.tsx
│   ├── lib/
│   │   ├── agents/
│   │   │   ├── agentManager.ts
│   │   │   ├── decisionMaking.ts
│   │   │   ├── ceoAgent.ts
│   │   │   ├── cSuiteAgents.ts
│   │   ├── simulation/
│   │   │   ├── businessEngine.ts
│   │   │   └── kpiCalculator.ts
│   │   └── utils/
│   │       └── localStorage.ts
│   ├── types/
│   │   └── game.d.ts
│   └── styles/
│       └── tailwind.css
├── public/
│   └── assets/
├── .eslintrc.json
├── .gitignore
├── next.config.mjs
├── package.json
├── postcss.config.mjs
├── README.md
├── tailwind.config.ts
└── tsconfig.json
```

## 4. Key Components and Their Responsibilities

### 4.1 Frontend Components

#### 4.1.1 Game Header (`src/components/ui/GameHeader.tsx`)
- Displays game title "Universal Paperclips - Business Advice Simulation"
- Implements accordion functionality to reveal business overview

#### 4.1.2 Chat Panel (`src/components/game/ChatPanel.tsx`)
- Manages the left side of the split view (full width on small screens)
- Implements scrollable chat interface with message bubbles
- Handles user input for advice
- Displays AI agent interactions and system messages

#### 4.1.3 Dashboard (`src/components/dashboard/Dashboard.tsx`)
- Manages the right side of the split view (below Chat Panel on small screens)
- Displays Company Overview component
- Renders 3x2 grid of KPI charts

#### 4.1.4 KPI Chart (`src/components/dashboard/KPIChart.tsx`)
- Implements time series chart for individual KPIs
- Utilizes Tremor for data visualization
- Updates in real-time as game progresses

#### 4.1.5 Business Cycle Header (`src/components/game/BusinessCycleHeader.tsx`)
- Displays current business cycle number
- Implements accordion functionality for collapsing CEO and C-suite conversations

#### 4.1.6 Company Overview (`src/components/dashboard/CompanyOverview.tsx`)
- Displays company name
- Shows current business cycle number
- Renders share price chart

#### 4.1.7 KPI Charts (`src/components/dashboard/KPICharts.tsx`)
- Renders a 3x2 grid of time series charts
- Each chart represents one of the following KPIs:
  1. Revenue
  2. Profit Margin
  3. CAC/CLV Ratio
  4. Production Efficiency Index
  5. Market Share
  6. Innovation Index
- X-axis represents business cycle number
- Updates in real-time as the game progresses

### 4.2 Backend Components

#### 4.2.1 Agent Manager (`src/lib/agents/agentManager.ts`)
- Orchestrates interactions between AI agents
- Manages the flow of the game cycle

#### 4.2.2 Business Engine (`src/lib/simulation/businessEngine.ts`)
- Implements core game logic
- Processes user advice and agent actions
- Triggers KPI updates

#### 4.2.3 KPI Calculator (`src/lib/simulation/kpiCalculator.ts`)
- Contains functions for calculating each KPI
- Processes simulation results to update KPIs

#### 4.2.4 Scenario Generator (`src/lib/simulation/scenarioGenerator.ts`)
- Generates new business challenges or inflection points for each cycle
- Ensures variety and progression in game difficulty

#### 4.2.5 Inter-Agent Communication Handler (`src/lib/agents/communicationHandler.ts`)
- Manages communication protocols between AI agents
- Facilitates the flow of information from CEO to C-suite team members

## 5. Game Flow and Logic

1. Game Initialization:
   - Existing game loads from local storage if available OR New game initializes with default settings
   - System presents business scenario

2. Game Cycle:
   a. System presents current business challenge (inflection point)
   b. CEO (AI agent) asks user for advice
   c. User provides advice via chat input
   d. CEO considers advice and delegates to C-suite team
   e. C-suite team members (AI agents) propose actions
   f. System simulates outcomes based on actions and inflection point
   g. KPIs are updated and displayed on the dashboard
   h. Cycle repeats with a new inflection point


## 6. AI Agent Implementation

- Utilize LangChain and LangGraph for agent logic
- Agents should consider user advice as a weighted factor in decision-making
- Ensure transparency of agent actions in the chat interface

## 7. Data Persistence

- Use local storage to save and load game state
- Persist both chat panel JSON and dashboard panel state
- Implement functions in `src/lib/utils/localStorage.ts` for state management

## 8. API Routes

- `/api/newGame`: Initializes a new game state
- `/api/simulate`: Runs the business cycle simulation, simulation is streamed to the client
- `/api/generateScenario`: Generates new business challenges or inflection points

## 9. Responsive Design

- Implement a split view for larger screens (Chat Panel left, Dashboard right)
- Stack Chat Panel above Dashboard for smaller screens
- Use Tailwind CSS for responsive styling

## 10. Performance Considerations

- Utilize React Server Components where possible
- Implement code splitting and lazy loading for improved load times
- Use edge runtime for API routes involving AI processing




## 11. Detailed UI/UX Specifications

### 11.1 Game Header
- Text: "Universal Paperclips - Business Advice Simulation"
- Clickable accordion to reveal business overview

### 11.2 Chat Panel
- Modern messaging platform look
- Scrollable with max height
- Each message includes sender name and avatar
- Implement the following message types:
  a. Business Cycle Header: Horizontal line with centered "Business Cycle <N>"
  b. System Message: Presents current business challenge (AI-generated)
  c. CEO Message: Asks user for advice
  d. User Input: Text input for user's advice
  e. Business Simulation Header: Horizontal line with centered "Business Simulation <N>"
     - Clickable to accordion collapse CEO and C-suite conversation
  f. CEO Response: Considers advice and delegates to C-suite
  g. C-suite Messages: Individual team members propose actions
  h. System Outcome: Simulates and presents the outcome

### 11.3 Dashboard Panel
- Company Overview:
  - Company name
  - Current cycle number
  - Share price chart
- KPI Display:
  - 3x2 grid of time series charts
  - X-axis represents business cycle number
  - Charts for: Revenue, Profit Margin, CAC/CLV Ratio, Production Efficiency Index, Market Share, Innovation Index

### 11.4 Game Controls
- "New Game" button

## 12. Backend Logic

### 12.1 LangChain's LangGraph Implementation
- Define roles and responsibilities for CEO, CTO, CFO, CMO, and COO agents
- Implement inter-agent communication protocols
- Design scenario generation and progression logic

### 12.2 AI Agent Decision Making
- Incorporate user advice as a weighted factor in the decision-making process
- Ensure transparency of agent reasoning and actions

### 12.3 Business Simulation Engine
- Create functions for calculating each KPI
- Implement an AI agent for structured output KPI updates
- Feed structured output programmatically into KPI functions to update the dashboard
